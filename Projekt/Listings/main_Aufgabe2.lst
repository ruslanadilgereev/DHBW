C51 COMPILER V9.60.0.0   MAIN_AUFGABE2                                                     02/18/2024 15:52:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN_AUFGABE2
OBJECT MODULE PLACED IN .\Objects\main_Aufgabe2.obj
COMPILER INVOKED BY: C:\DHBW\Mechatronische Systeme in der Anwendung\Software-20240129\C51\BIN\C51.EXE main_Aufgabe2.c O
                    -PTIMIZE(8,SPEED) BROWSE MODP2 DEBUG OBJECTEXTEND PRINT(.\Listings\main_Aufgabe2.lst) TABS(2) OBJECT(.\Objects\main_Aufga
                    -be2.obj)

line level    source

   1          #include <xc886.h> // XC Board Bibliothek
   2          #include <DIP204_XC886.c>  // Display Funktionen
   3          
   4          // Definition der Pins für den Ultraschall-Sensor
   5          #define TRIGGER_PIN 2  // P1.2 als Trigger-Pin für den Ultraschall-Sender
   6          #define ECHO_PIN 5     // P0.5 als Echo-Pin für den Ultraschall-Empfänger
   7          
   8          // Variablen für die Entfernungsmessung
   9          unsigned long distance;    // Entfernung in Zentimetern
  10          unsigned long passed_time; // Zeit in Timer-Ticks
  11          unsigned long passed_ticks; // Zeit in Timer-Ticks
  12          unsigned long t0_ueberlauf; // Überlauf für Messbereichserweiterung
  13          
  14          // Eigene Funktionen
  15          void init(void);
  16          void calculate_distance(void);
  17          void wait(int t);
  18          void sendTriggerPulse(void);
  19          void lcd_distance(unsigned long value);
  20          
  21          // Hauptfunktion
  22          void main(void)
  23          {
  24   1          init();  // Initialisiert die Hardware
  25   1      
  26   1          lcd_curs(0); // Setzt Cursor zurück 
  27   1          lcd_str("Abstand: ");
  28   1        
  29   1          while(1)
  30   1          {
  31   2              sendTriggerPulse();  // Sendet einen Trigger-Impuls
  32   2          
  33   2              while(TR0 == 1);  // Warten, bis Timer 0 stoppt -> erfolgt im Interrupt
  34   2              
  35   2              calculate_distance();  // Berechnugn der Distanz
  36   2              
  37   2              lcd_distance(distance);  // Zeigt die Entfernung auf dem LCD an  
  38   2          
  39   2              wait(50000);  // Wartezeit zwischen den Messungen
  40   2          }
  41   1      }
  42          
  43          
  44          // Interrupt Service Routine für das Echo-Signal
  45          void echo_interrupt() interrupt 0 
  46          {
  47   1          TR0 = 0;    // Stoppt Timer 0 bei Echo-Empfang
  48   1          IRCON0 = 0; // Löscht Interrupt-Anforderung
  49   1      }
  50          
  51          
  52          // Interrupt Service Routine für den Überlauf des Timer0
  53          void timer_ueberlauf(void) interrupt 1 
C51 COMPILER V9.60.0.0   MAIN_AUFGABE2                                                     02/18/2024 15:52:23 PAGE 2   

  54          {
  55   1          t0_ueberlauf += 65536;  // Addiert die maximale Zählmenge bei einem Überlauf
  56   1      
  57   1          TH0 = 0;  // Zurücksetzen des Timer-High-Byte
  58   1          TL0 = 0;  // Zurücksetzen des Timer-Low-Byte
  59   1      }
  60          
  61          
  62          // Initialisierung der Flags und Bildschirms
  63          void init(void)
  64          {
  65   1          lcd_init();              // Initialisiert das LCD
  66   1          lcd_clr();               // Löscht das LCD
  67   1      
  68   1          P0_DIR = 0x00;           // Konfiguriert Port 0 als Eingang 
  69   1          P1_DIR = 0xFF;           // Konfiguriert Port 1 als Ausgang 
  70   1      
  71   1          TMOD = 0x11;             // Timer0 und Timer1 als 16-Bit-Zähler initialisiert
  72   1          TR1 = 1;                 // Startet Timer 1
  73   1      
  74   1          EA = 1;                  // Global Interrupt Enable
  75   1          EX0 = 1;                 // External Interrupt 0 Enable
  76   1          ET0 = 1;                 // Interrupt Timer0 Enable
  77   1          IT0 = 1;                 // Interrupt 0 auf Edge Triggered einstellen
  78   1          EXICON0 = 0x00;          // Interrupt auf fallende Flanke einstellen
  79   1      }
  80          
  81          
  82          // Berechnet die Entfernung basierend auf Timer-Werten
  83          void calculate_distance(void) 
  84          {
  85   1          passed_ticks = t0_ueberlauf + (TH0 * 256 + TL0) - 5697;  // Korrigiert um Offset: Zeit zwischen Trigger 
             -Signal und Echo High
  86   1          passed_time = passed_ticks * 43;
  87   1          distance = passed_time / 30000;  // Umrechnung in Zentimeter
  88   1        
  89   1          t0_ueberlauf = 0;  // Zurücksetzen des Überlaufs
  90   1      }
  91          
  92          
  93          // Wartefunktion, blockiert für 't' Schleifendurchläufe
  94          void wait(int t)
  95          {
  96   1          unsigned int i;
  97   1          for(i = 0; i < t; i++)
  98   1          {
  99   2              TH1 = 0xFF;
 100   2              TL1 = 0x87;  // Eine Schleife entspricht 10uS -> 0xffff - ( 10us - 0.0833us) ==  0xff87 ; Entspric
             -ht allerdings laut Messung ca 15us
 101   2              while(TF1 == 0);  // Wartet auf Timer-Flag
 102   2              TF1 = 0;  // Setzt Timer-Flag zurück
 103   2          }
 104   1      }
 105          
 106          
 107          // Funktion zum Senden eines Trigger-Impulses an den Ultraschall-Sender
 108          void sendTriggerPulse(void) 
 109          {
 110   1          TH0 = 0;  //
 111   1          TL0 = 0;  // Zur
 112   1        
 113   1          P1_DATA = (1 << TRIGGER_PIN);  // Setzt Trigger-Pin High
C51 COMPILER V9.60.0.0   MAIN_AUFGABE2                                                     02/18/2024 15:52:23 PAGE 3   

 114   1          wait(1);                       // Kurze Wartezeit
 115   1          P1_DATA = ~(1 << TRIGGER_PIN); // Setzt Trigger-Pin Low, beendet den Impuls
 116   1      
 117   1          TR0 = 1;  // Startet Timer 0 für die Zeitmessung
 118   1      }
 119          
 120          
 121          
 122          // Funktion zur Ausgabe eines langen Wertes auf dem LCD
 123          void lcd_distance(unsigned long value)
 124          {
 125   1          unsigned char i;
 126   1          
 127   1          lcd_curs(9); // Setzt Cursor zurück 
 128   1        
 129   1          i = value / 100; 
 130   1          value %= 100;
 131   1          if(i!=0) asc_out(i + 0x30);  // Hundertstel
 132   1      
 133   1          i = value / 10; 
 134   1          value %= 10;
 135   1          asc_out(i + 0x30);  // Zehner
 136   1      
 137   1          value += 0x30;
 138   1          asc_out((char)value);  // Einer
 139   1        
 140   1          lcd_str(" cm  ");
 141   1          lcd_curs(9); // Setzt Cursor zurück 
 142   1      }
 143          
 144          
 145          
 146          
 147          
 148          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1125    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
