C51 COMPILER V9.60.0.0   MAIN_AUFGABE2                                                     03/07/2024 20:22:24 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN_AUFGABE2
OBJECT MODULE PLACED IN .\Objects\main_Aufgabe2.obj
COMPILER INVOKED BY: C:\DHBW\Mechatronische Systeme in der Anwendung\Software-20240129\C51\BIN\C51.EXE main_Aufgabe2.c O
                    -PTIMIZE(8,SPEED) BROWSE MODP2 DEBUG OBJECTEXTEND PRINT(.\Listings\main_Aufgabe2.lst) TABS(2) OBJECT(.\Objects\main_Aufga
                    -be2.obj)

line level    source

   1          #include <xc886.h> // XC Board Bibliothek
   2          #include <DIP204_XC886.c>  // Display Funktionen
   3          
   4          // Definition der Pins f�r den Ultraschall-Sensor
   5          #define TRIGGER_PIN 2  // P1.2 als Trigger-Pin f�r den Ultraschall-Sender
   6          #define ECHO_PIN 5     // P0.5 als Echo-Pin f�r den Ultraschall-Empf�nger
   7          
   8          // Variablen f�r die Entfernungsmessung
   9          unsigned long distance;    // Entfernung in Zentimetern
  10          unsigned long passed_time; // Zeit in Timer-Ticks
  11          unsigned long passed_ticks; // Zeit in Timer-Ticks
  12          unsigned long t0_ueberlauf; // �berlauf f�r Messbereichserweiterung
  13          
  14          // Eigene Funktionen
  15          void init(void);
  16          void calculate_distance(void);
  17          void wait(int t);
  18          void sendTriggerPulse(void);
  19          void lcd_distance(unsigned long value);
  20          
  21          // Hauptfunktion
  22          void main(void)
  23          {
  24   1          init();  // Initialisiert die Hardware
  25   1          
  26   1          while(1)
  27   1          {
  28   2              sendTriggerPulse();     // Sendet einen Trigger-Impuls
  29   2          
  30   2              while(TR0 == 1);        // Warten, bis Timer 0 stoppt -> erfolgt im Interrupt
  31   2              
  32   2          calculate_distance();   // Berechnugn der Distanz
  33   2          
  34   2          lcd_distance(distance); // Zeigt die Entfernung auf dem LCD an  
  35   2      
  36   2              wait(50000);            // Wartezeit zwischen den Messungen
  37   2          }
  38   1      }
  39          
  40          
  41          // Interrupt Service Routine f�r das Echo-Signal
  42          void echo_interrupt() interrupt 0 
  43          {
  44   1          TR0 = 0;    // Stoppt Timer 0 bei Echo-Empfang
  45   1          IRCON0 = 0; // L�scht Interrupt-Anforderung
  46   1      }
  47          
  48          
  49          // Interrupt Service Routine f�r den �berlauf des Timer0
  50          void timer_ueberlauf(void) interrupt 1 
  51          {
  52   1          t0_ueberlauf += 65536;  // Addiert die maximale Z�hlmenge bei einem �berlauf
  53   1      }
C51 COMPILER V9.60.0.0   MAIN_AUFGABE2                                                     03/07/2024 20:22:24 PAGE 2   

  54          
  55          
  56          // Initialisierung der Flags und Bildschirms
  57          void init(void)
  58          {
  59   1          lcd_init();              // Initialisiert das LCD
  60   1          lcd_clr();               // Löscht das LCD
  61   1      
  62   1          P0_DIR = 0x00;           // Konfiguriert Port 0 als Eingang 
  63   1          P1_DIR = 0xFF;           // Konfiguriert Port 1 als Ausgang 
  64   1      
  65   1          TMOD = 0x11;             // Timer0 und Timer1 als 16-Bit-Z�hler initialisiert
  66   1          TR1 = 1;                 // Startet Timer 1
  67   1      
  68   1          EA = 1;                  // Global Interrupt Enable
  69   1          EX0 = 1;                 // External Interrupt 0 Enable
  70   1        ET0 = 1;                 // Interrupt Timer0 Enable
  71   1          IT0 = 0;                 // Interrupt 0 auf Edge Triggered einstellen
  72   1          //EXICON0 = 0x00;          // Interrupt auf fallende Flanke einstellen
  73   1      }
  74          
  75          
  76          // Berechnet die Entfernung basierend auf Timer-Werten
  77          void calculate_distance(void) 
  78          {
  79   1          passed_ticks = t0_ueberlauf + (TH0 * 256 + TL0) - 5703;  // Korrigiert um Offset: Zeit zwischen Trigger 
             -Signal und Echo High
  80   1          passed_time = passed_ticks * 43; // 
  81   1          distance = passed_time / 30000;  // Umrechnung in Zentimeter
  82   1        
  83   1          t0_ueberlauf = 0;  // Zur�cksetzen des �berlaufs
  84   1      }
  85          
  86          
  87          // Wartefunktion, blockiert für 't' Schleifendurchl�ufe. Ein Schleifendurchlauf entspricht 15uS.
  88          void wait(int t)
  89          {
  90   1          unsigned int i;
  91   1          for(i = 0; i < t; i++)
  92   1          {
  93   2              TH1 = 0xFF;
  94   2              TL1 = 0x87;  // Eine Schleife entspricht 10uS -> 0xffff - ( 10us - 0.0833us) ==  0xff87 ; Entspric
             -ht allerdings laut Messung ca 15us
  95   2              while(TF1 == 0);  // Wartet auf Timer-Flag
  96   2              TF1 = 0;  // Setzt Timer-Flag zur�ck
  97   2          }
  98   1      }
  99          
 100          
 101          // Funktion zum Senden eines Trigger-Impulses an den Ultraschall-Sender
 102          void sendTriggerPulse(void) 
 103          {
 104   1        TH0 = 0;  // Timer 0 zurücksetzen
 105   1        TL0 = 0;  // Timer 0 zurücksetzen
 106   1      
 107   1        P1_DATA = (1 << TRIGGER_PIN);  // Setzt Trigger-Pin High
 108   1          wait(1);                       // Kurze Wartezeit
 109   1          P1_DATA = ~(1 << TRIGGER_PIN); // Setzt Trigger-Pin Low, beendet den Impuls
 110   1      
 111   1        TR0 = 1;  // Startet Timer 0 f�r die Zeitmessung
 112   1      }
 113          
C51 COMPILER V9.60.0.0   MAIN_AUFGABE2                                                     03/07/2024 20:22:24 PAGE 3   

 114          
 115          
 116          // Funktion zur Ausgabe eines langen Wertes auf dem LCD
 117          void lcd_distance(unsigned long value)
 118          {
 119   1          unsigned char i, j;
 120   1          lcd_curs(0); // Setzt Cursor zur�ck 
 121   1          lcd_clr();
 122   1          lcd_str("Abstand ");
 123   1          //lcd_curs(8); // Setzt Cursor zur�ck 
 124   1        
 125   1          if(value > 300)
 126   1          {
 127   2            lcd_str("zu gross!");
 128   2            lcd_curs(20);
 129   2            lcd_str("Mehr als 3m");
 130   2          }
 131   1          
 132   1          else if(value < 3)
 133   1          {
 134   2            lcd_str("zu klein!");
 135   2            lcd_curs(20);
 136   2            lcd_str("Kleiner als 3cm");
 137   2          }
 138   1          
 139   1          else
 140   1          { 
 141   2            i = value / 100; 
 142   2            value %= 100;
 143   2            if(i != 0) asc_out(i + 0x30);  // Hundertstel
 144   2      
 145   2            j = value / 10; 
 146   2            value %= 10;
 147   2            if(j != 0 || (j == 0 && i != 0)) asc_out(j + 0x30);  // Zehner, korrigiert: ausgegeben nur wenn j nicht
             - 0
 148   2      
 149   2            value += 0x30;
 150   2            asc_out((char)value);  // Einer
 151   2      
 152   2            lcd_str(" cm");
 153   2          }
 154   1          
 155   1      }
 156          
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1210    ----
   CONSTANT SIZE    =     61    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      24
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
